---
# tasks file for openvpn

- name: Load var file with package URL based on the OS type
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}_{{ ansible_distribution_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
        # The OS family and distribution for Kali is "Kali GNU/Linux",
        # which is not an allowable file name in Linux due to the
        # slash.  We will allow Kali to fall through and use the
        # Debian vars file.
        - Debian.yml
      paths:
        - "{{ role_path }}/vars"

- name: Install curl, OpenVPN, and the python libraries
  package:
    name: "{{ package_names }}"

- name: Install boto3 and dnspython
  pip:
    executable: pip3
    name:
      - boto3
      - dnspython

- name: Copy OpenVPN config from files
  copy:
    src: primary.conf
    owner: root
    mode: 0600
    dest: /etc/openvpn/server/

- name: Install certificate fetch script
  copy:
    src: fetch_user_ca_certs.sh
    owner: root
    mode: 0700
    dest: /etc/openvpn/server/

- name: Install common name verification script
  copy:
    src: verify-cn.py
    owner: root
    mode: 0700
    dest: /etc/openvpn/server/

- name: Install common name verification script configuration
  copy:
    src: verify-cn.yml
    owner: root
    mode: 0400
    dest: /etc/openvpn/server/

- name: Fetch DHS CA certificates using fetch_user_ca_certs.sh
  command: /etc/openvpn/server/fetch_user_ca_certs.sh
  args:
    chdir: /etc/openvpn/server
    creates: /etc/openvpn/server/certs

# Unless you do this, systemd can sometimes get confused when you try
# to start a service you just installed
- name: Systemd daemon-reload
  systemd:
    daemon_reload: true
  when:
    - ansible_service_mgr == "systemd"

- name: Enable OpenVPN
  service:
    name: "{{ service_name }}@primary"
    enabled: yes
    state: stopped

- name: Configure OpenVPN service to run after multi-user and cloud-final
  lineinfile:
    dest: /lib/systemd/system/{{ service_name }}@.service
    regexp: ^After=
    state: present
    line: After=network.target multi-user.target cloud-final.service
